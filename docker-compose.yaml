version: '3.5'
services:
  fiap-microservices:
    build:
      context:  services/java-user-api/
      dockerfile: Dockerfile
    container_name: fiap-microservices
    ports:
    - "8080:8080"
    - "7001:7000"
    environment:
      PORT: 8080
      ENV: docker
      JAVA_OPTS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:7000
    networks:
    - fiap-microservices
  consumer-php-app:
    build:
      context: services/php-slack-consumer/
      dockerfile: Dockerfile
    image: laravel
    container_name: consumer-php-app
    working_dir: /var/www
    volumes:
      - ./services/php-slack-consumer:/var/www
    environment:
      - APP_NAME=Consumer
      - APP_ENV=local
      - APP_KEY=base64:and4lvch4HIe73Iw/JEQN6gh3YWCI0nk54rdOnaIKEQ=
      - APP_DEBUG=true
      - AMQP_USERNAME=rabbitmq
      - AMQP_PASSWORD=rabbitmq
      - AMQP_HOST=fiap-rabbit
      - AMQP_PORT=5672
      - AMQP_VHOST=/
      - AMQP_EXCHANGE_NAME=userRegistrations
      - AMQP_EXCHANGE_TYPE=fanout
      - SLACK_WEBHOOK_URL=https://hooks.slack.com/services/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

    command: bash -c "composer install && php artisan rabbitmq:consume"
    depends_on:
      - "rabbitmq"

    networks:
    - fiap-microservices
  db:
    image: mysql:5.7
    volumes:
    - db-data:/var/lib/mysql/
    container_name: fiap-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_PASSWORD: 123456
      MYSQL_DATABASE: microservices
    ports:
    - "3306:3306"
    networks:
    - fiap-microservices
  rabbitmq:
    image: rabbitmq:3-management
    container_name: fiap-rabbit
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=rabbitmq
      - RABBITMQ_DEFAULT_PASS=rabbitmq
      - RABBITMQ_DEFAULT_VHOST=/
    ports:
    - "15672:15672"
    - "5672:5672"
    - "25676:25676"
    networks:
    - fiap-microservices
  frontend:
    build:
      context: services/front-end/
      dockerfile: Dockerfile
    image: vuejs
    restart: always
    container_name: front-end
    working_dir: /app
    ports:
      - 8081:8080
    volumes:
      - ./services/front-end:/app
    networks:
    - fiap-microservices
volumes:
  db-data:
networks:
  fiap-microservices:
